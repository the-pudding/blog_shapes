{"intro":[{"type":"text","value":"A little over a year ago, my colleague <a href=https://pudding.cool/author/jan-diehm target=_blank>Jan</a> and I decided to write a story about how much we hate the <a href=https://pudding.cool/2018/08/pockets/ target=_blank>pockets</a> in womens’ jeans."},{"type":"text","value":"After spending hours hiding out in dressing rooms collecting pocket measurements, we realized two things. First was that we were on to something (women’s pockets are the worst). And the second was that when trying to show how much smaller women’s pockets were than men’s, “standard data viz” (think bar charts, scatter plots, and line graphs) weren’t going to cut it. <em>Seeing</em> the pocket shapes themselves helped tell the story far better than numbers could."},{"type":"text","value":"We had a few false-starts, but eventually figured out how to use <a href=https://d3js.org/ target=_blank>D3.js</a> to create SVG pocket shapes using our data. This post will explain how we did that and how you can too."}],"setup-html":"Before we get started, we need a few things in place. We’ll start with our HTML file. Create a <code>figure</code> element with a <code>svg</code> element inside.","setup-css":"Next, we’ll set up a CSS file for use later. For now, we’re just going to set the size of our SVG.","setup-js":"Last, we need to setup our JavaScript file. In it, we’ll create two functions. The first is <code>setup()</code>. This uses d3’s enter/update/exit structure to append a path to our <code>svg</code>. The shape of that path will be created using our second function, <code>drawShape()</code>.","post-setup":[{"type":"text","value":"You may also have noticed something else important in the <code>js</code> code. We defined a variable <code>context</code> as <code>d3.path()</code>. Since <a href=https://github.com/d3/d3-path target=_blank>d3.path</a> uses the same structure of path creation as <a href=https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API target=_blank>HTML Canvas</a>, we are continuing with their nomenclature here. If you’re unfamiliar with HTML Canvas, don’t worry. In Canvas, a <a href=https://www.html5canvastutorials.com/tutorials/html5-canvas-element/ target=_blank>“context”</a> is “an object with properties and methods that you can use to render graphics inside the canvas element.” Here, we’ll be chaining commands together onto our <code>context</code> to draw our pocket shape."},{"type":"text","value":"In both Canvas and <code>d3.path</code>, there are <a href=https://github.com/d3/d3-path target=_blank>several D3 functions</a> that can be used to help draw a specific shape. For instance, if you want to draw a straight line between your current point and another, you’d use the function <code>lineTo()</code>. This may be easier to understand by seeing it in action, so let’s take a look."}],"pocket-steps":[{"text":"We’re starting with the <code>SVG</code> element that we created in our HTML file. Using <code>d3.path()</code> we’re going to draw a pocket shape on top of this element. It might be helpful to think of the SVG as a piece of paper that we’ll draw on by moving a pencil from one location to another. In SVG, the “pencil” always starts in the upper left-hand corner."},{"text":"To help illustrate how this will work, I’m going to include an image of a pocket behind our SVG. Let’s figure out how to “trace” the pocket in our image. First, we need to move our “pencil” to the upper-left corner of our pocket image. There are a few ways we can do this, but the easiest is to <code> transform: translate</code> our drawing. Check out the line we’ve added to our <code>setup()</code> function. <pre data-src=assets/prism/transform.js data-line=2></pre>"}]}